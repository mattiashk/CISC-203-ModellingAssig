class Course(builtins.object)
 |  Course(id, department, course_code, course_name, campus, description, grading_basis, course_components, requirements, add_consent, drop_consent, academic_level, academic_group, academic_org, units, CEAB)
 |  
 |  Represents a Queens course with its attributes.
 |  
 |  Attributes:
 |      id (str): The course ID.
 |      department (str): The department offering the course.
 |      course_code (str): The code of the course.
 |      course_name (str): The name of the course.
 |      sections (Sections): A Sections object.
 |      campus (str): The campus where the course is offered.
 |      description (str): A description of the course.
 |      grading_basis (str): The grading basis for the course.
 |      course_components (dict): A dictionary representing course components.
 |      requirements (str): Prerequisites and requirements for the course.
 |      add_consent (str): Additional consent information.
 |      drop_consent (str): Information regarding consent for dropping the course.
 |      academic_level (str): The academic level (e.g., Undergraduate).
 |      academic_group (str): The academic group to which the course belongs.
 |      academic_org (str): The academic organization offering the course.
 |      units (float): The number of course units.
 |      CEAB (dict): A dictionary representing CEAB (Canadian Engineering Accreditation Board) information.
 |  
 |  Methods:
 |      __str__(): Returns a string representation of the Course instance.
 |      is_offered_in_term(term): Returns True if the course is offered during a specific Term.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, id, department, course_code, course_name, campus, description, grading_basis, course_components, requirements, add_consent, drop_consent, academic_level, academic_group, academic_org, units, CEAB)
 |      Initializes a Course instance.
 |  
 |  __str__(self)
 |      Returns a string representation of the course.
 |      
 |      Returns:
 |          str: A formatted string with course information.
 |  
 |  is_offered_in_term(self, term)
 |      Checks if the course is offered in a specific academic term.
 |      
 |      Args:
 |          term (str): The academic term to check for (e.g., "Fall 2023").
 |      
 |      Returns:
 |          bool: True if the course is offered in the specified term, False otherwise.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  CEAB
 |      Get CEAB (Canadian Engineering Accreditation Board) information (as a dictionary).
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  academic_group
 |      Get the academic group to which the course belongs.
 |  
 |  academic_level
 |      Get the academic level (e.g., Undergraduate).
 |  
 |  academic_org
 |      Get the academic organization offering the course.
 |  
 |  add_consent
 |      Get additional consent information.
 |  
 |  campus
 |      Get the campus where the course is offered.
 |  
 |  course_code
 |      Get the code of the course.
 |  
 |  course_components
 |      Get the course components (as a dictionary).
 |  
 |  course_name
 |      Get the name of the course.
 |  
 |  department
 |      Get the department offering the course.
 |  
 |  description
 |      Get a description of the course.
 |  
 |  drop_consent
 |      Get information regarding consent for dropping the course.
 |  
 |  grading_basis
 |      Get the grading basis for the course.
 |  
 |  id
 |      Get the course ID.
 |  
 |  requirements
 |      Get the prerequisites and requirements for the course.
 |  
 |  sections
 |      Get the dictionary of Sections objects that are connected to the Course object.
 |  
 |  units
 |      Get the number of course units.

class Courses(collections.abc.Mapping)
 |  Courses(courses=None)
 |  
 |  Method resolution order:
 |      Courses
 |      collections.abc.Mapping
 |      collections.abc.Collection
 |      collections.abc.Sized
 |      collections.abc.Iterable
 |      collections.abc.Container
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, item)
 |      Check if a Course object is in the collection.
 |      
 |      Args:
 |          item: The Course object to check for presence in the collection.
 |      
 |      Returns:
 |          bool: True if the Course object is in the collection, False otherwise.
 |  
 |  __getitem__(self, item)
 |      Retrieve a Course object by its unique ID.
 |      
 |      Args:
 |          item: The unique identifier (ID) of the Course to be retrieved.
 |      
 |      Returns:
 |          Course: The Course object associated with the provided unique ID.
 |      
 |      Note:
 |          This method allows you to access a Course object from the Courses
 |          collection using its unique identifier. If the ID is not found, it
 |          will raise a KeyError.
 |  
 |  __init__(self, courses=None)
 |      Initializes a Courses instance with an optional dictionary of Courses.
 |      
 |      Args:
 |          courses (dict, optional): A dictionary of Course objects indexed by course ID.
 |              Default is None, which creates an empty dictionary.
 |  
 |  __iter__(self)
 |      Make the Courses class iterable. This method returns an iterator.
 |  
 |  __len__(self)
 |      Get the number of Course objects in the collection.
 |      
 |      Returns:
 |          int: The number of Course objects in the collection.
 |  
 |  __next__(self)
 |      Get the next Course object in the iteration.
 |  
 |  __str__(self)
 |      Returns a string representation of the list of Course objects.
 |      
 |      Returns:
 |          str: A list with information for each Course.
 |  
 |  add_course(self, course)
 |      Add a Course to the collection.
 |      
 |      Args:
 |          course (Course): The Course object to be added.
 |  
 |  add_courses(self, courses)
 |      Add multiple courses to the collection.
 |      
 |      Args:
 |          courses (list of Course): A list of Course objects to be added.
 |  
 |  add_item(self, key, value)
 |      Add a Course object to the collection using a unique identifier (ID).
 |      
 |      Args:
 |          key: The unique identifier (ID) for the Course.
 |          value: The Course object to add to the collection.
 |  
 |  find_course_by_id(self, id)
 |      Find a Course by its unique identifier.
 |      
 |      Args:
 |          id (str): The unique identifier of the Course to search for.
 |      
 |      Returns:
 |          Course or None: The Course object if found, or None if not found.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  courses
 |      Get the list of Courses.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ALLCOURSES = None
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from collections.abc.Mapping:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  get(self, key, default=None)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(self)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(self)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  values(self)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from collections.abc.Mapping:
 |  
 |  __hash__ = None
 |  
 |  __reversed__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from collections.abc.Collection:
 |  
 |  __subclasshook__(C) from abc.ABCMeta
 |      Abstract classes can override this to customize issubclass().
 |      
 |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
 |      It should return True, False or NotImplemented.  If it returns
 |      NotImplemented, the normal algorithm is used.  Otherwise, it
 |      overrides the normal algorithm (and the outcome is cached).


class Section(TermLevelSection)
 |  Section(class_number, combined_with, dates, enrollment_capacity, enrollment_total, last_updated, section_name, section_number, section_type, waitlist_capacity, waitlist_total)
 |  
 |  Represents a specific course section with its attributes.
 |  
 |  Attributes:
 |      class_number (str): The unique identifier for the course section.
 |      combined_with (str): Information about combined sections, if applicable.
 |      dates (str): The dates when the course section is scheduled.
 |      enrollment_capacity (int): The maximum number of students that can enroll in the section.
 |      enrollment_total (int): The current number of students enrolled in the section.
 |      last_updated (str): Timestamp of the last update to the section information.
 |      section_name (str): The name of the course section.
 |      section_number (str): The section number.
 |      section_type (str): The type of the section (e.g., lecture, lab).
 |      waitlist_capacity (int): The maximum number of students that can be on the waitlist.
 |      waitlist_total (int): The current number of students on the waitlist.
 |  
 |  Methods:
 |      __str__(): Returns a string representation of the Section instance.
 |      has_conflict(other): Checks for date conflicts between two Section objects.
 |  
 |  Method resolution order:
 |      Section
 |      TermLevelSection
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, class_number, combined_with, dates, enrollment_capacity, enrollment_total, last_updated, section_name, section_number, section_type, waitlist_capacity, waitlist_total)
 |      Initializes a TermLevelSection instance.
 |  
 |  __str__(self)
 |      Returns a string representation of the Section.
 |      
 |      Returns:
 |          str: A formatted string with Section information.
 |  
 |  add_parent_section(self, id, year, term, department, course_code, course_name, units, campus, academic_level, course_sections)
 |  
 |  has_conflict(self, other)
 |      Checks for date conflicts between two Section objects.
 |      
 |      This method compares the dates of the current Section object with another Section object
 |      to determine if there are any date and time conflicts. It iterates through the date
 |      schedules of both sections, and if it finds overlapping time slots on the same day,
 |      it indicates a conflict.
 |      
 |      Args:
 |          other (Section): Another Section object to compare against.
 |      
 |      Returns:
 |          bool: True if there is a date conflict between the two sections, False otherwise.
 |      
 |      Raises:
 |          ValueError: If the 'other' object is not an instance of the Section class.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  class_number
 |      Get the unique identifier for the course section.
 |  
 |  combined_with
 |      Get information about combined sections, if applicable.
 |  
 |  dates
 |      Get the dates when the course section is scheduled.
 |  
 |  enrollment_capacity
 |      Get the maximum number of students that can enroll in the section.
 |  
 |  enrollment_total
 |      Get the current number of students enrolled in the section.
 |  
 |  last_updated
 |      Get the timestamp of the last update to the section information.
 |  
 |  section_name
 |      Get the name of the course section.
 |  
 |  section_number
 |      Get the section number.
 |  
 |  section_type
 |      Get the type of the section (e.g., lecture, lab).
 |  
 |  waitlist_capacity
 |      Get the maximum number of students that can be on the waitlist.
 |  
 |  waitlist_total
 |      Get the current number of students on the waitlist.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TermLevelSection:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

class SectionDates(builtins.object)
 |  Represents a collection of SectionDate objects with its attributes.
 |  
 |  Attributes:
 |      dates (list): The collection of SectionDate objet.
 |  
 |  Methods:
 |      __str__(self): Returns a string representation of the SectionDates instance.
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |      Make the SectionDates class iterable. This method returns an iterator.
 |  
 |  __next__(self)
 |      Get the next SectionDate object in the iteration.
 |  
 |  __str__(self)
 |      Returns a string representation of the list of SectionDates objects.
 |      
 |      Returns:
 |          str: A list with information for each SectionDate object.
 |  
 |  add_date(self, date)
 |      Add a SectionDate to the collection.
 |      
 |      Args:
 |          date (SectionDate): The SectionDate object to be added.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

class SectionDate(builtins.object)
 |  SectionDate(day, start_date, end_date, start_time, end_time, instructors, location)
 |  
 |  Represents a SectionDate object with its attributes.
 |  
 |  Attributes:
 |      day (str): The day of the week for the section date.
 |      start_date (str): The start date of the section.
 |      end_date (str): The end date of the section.
 |      start_time (str): The start time of the section.
 |      end_time (str): The end time of the section.
 |      instructors (list): A list of instructors for the section date.
 |      location (str): The location where the section date takes place.
 |  
 |  Methods:
 |      __str__(self): Returns a string representation of the SectionDate instance.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, day, start_date, end_date, start_time, end_time, instructors, location)
 |      Initializes a SectionDate with the provided attributes.
 |      
 |      Args:
 |          day (str): The day of the week for the section date.
 |          start_date (str): The start date of the section.
 |          end_date (str): The end date of the section.
 |          start_time (str): The start time of the section.
 |          end_time (str): The end time of the section.
 |          instructors (list): A list of instructors for the section date.
 |          location (str): The location where the section date takes place.
 |  
 |  __str__(self)
 |      Returns a string representation of the SectionDate.
 |      
 |      Returns:
 |          str: A formatted string with SectionDate information.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  day
 |      Get the day of the week for the section date.
 |  
 |  end_date
 |      Get the end date of the section.
 |  
 |  end_time
 |      Get the end time of the section.
 |  
 |  instructors
 |      Get the list of instructors for the section date.
 |  
 |  location
 |      Get the location where the section date takes place.
 |  
 |  start_date
 |      Get the start date of the section.
 |  
 |  start_time
 |      Get the start time of the section.

class Sections(collections.abc.Mapping)
 |  Represents a collection of CourseSection objects with the ability to manage, search, and iterate through them.
 |  
 |  Attributes:
 |      sections (dict): A dictionary that stores CourseSection objects in a 2D dictionary with the first level being the term 
 |          and the second level being the CourseSections by their unique IDs.
 |  
 |  Methods:
 |      add_sections(self, sections): Add multiple sections to the collection.
 |      add_section(self, section): Add a CourseSection to the collection.
 |      find_section_by_id(self, id): Find a CourseSection by its unique identifier.
 |      find_sections_by_course_code(self, code): Find all Sections over different terms by its course code.
 |      get_term_collection(self, term): Get a collection of CourseSection objects during a specific term.
 |      __str__(self): Returns a string representation of the list of CourseSection objects.
 |      __iter__(self): Make the Sections class iterable. This method returns an iterator.
 |      __next__(self): Get the next CourseSection object in the iteration.
 |      __getitem__(self, item): Retrieve a CourseSection object by its unique ID.
 |      __len__(self): Get the number of CourseSection objects in the collection.
 |      __contains__(self, item): Check if a CourseSection object is in the collection.
 |      __getitem__(self, item): Retrieve a CourseSection object by its unique ID.
 |      add_items(self, key, value): Add a CourseSection object to the collection using a unique identifier (ID).
 |  
 |  Method resolution order:
 |      Sections
 |      collections.abc.Mapping
 |      collections.abc.Collection
 |      collections.abc.Sized
 |      collections.abc.Iterable
 |      collections.abc.Container
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, item)
 |      Check if a CourseSection object is in the collection.
 |      
 |      Args:
 |          item: The CourseSection object to check for presence in the collection.
 |      
 |      Returns:
 |          bool: True if the CourseSection object is in the collection, False otherwise.
 |  
 |  __getitem__(self, item)
 |      Retrieve a CourseSetion object by its unique ID.
 |      
 |      Args:
 |          item: The unique identifier (ID) of the CourseSection to be retrieved.
 |      
 |      Returns:
 |          CourseSection: The CourseSection object associated with the provided unique ID.
 |      
 |      Note:
 |          This method allows you to access a CourseSection object from the Sections
 |          collection using its unique identifier. If the ID is not found, it
 |          will raise a KeyError.
 |  
 |  __init__(self)
 |      Initializes an empty Sections instance.
 |  
 |  __iter__(self)
 |      Make the Sections class iterable. This method returns an iterator.
 |  
 |  __len__(self)
 |      Get the number of CourseSection objects in the collection.
 |      
 |      Returns:
 |          int: The number of CourseSection objects in the collection.
 |  
 |  __next__(self)
 |      Get the next Section object in the iteration.
 |  
 |  __str__(self)
 |      Returns a string representation of the Sections object.
 |      
 |      Returns:
 |          str: A string with information for each Section.
 |  
 |  add_item(self, value)
 |      Add a CourseSection object to the collection using a unique identifier (ID).
 |      
 |      Args:
 |          value: The CourseSection object to add to the collection.
 |  
 |  add_section(self, section)
 |      Add a CourseSection to the collection in its correct Term collection.
 |      
 |      Args:
 |          section (CourseSection): The CourseSection object to be added.
 |  
 |  add_sections(self, sections)
 |      Add multiple sections to the collection.
 |      
 |      Args:
 |          sections (list of Section): A list of Section objects to be added.
 |  
 |  find_section_by_id(self, id)
 |      Find a Section by its unique identifier.
 |      
 |      Args:
 |          id (str): The unique identifier of the Section to search for.
 |      
 |      Returns:
 |          Section or None: The Section object if found, or None if not found.
 |  
 |  get_term_collection(self, term)
 |      Get a collection of CourseSection objects during a specific term.
 |      
 |      Args:
 |          term (Term): The term collection to return.
 |      
 |      Returns:
 |          Dict or None: A dict of the CourseSection objects if found, or None if the term collection is not found.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  all_sections_by_term
 |      Get the dictionary of Section objects per term.
 |      
 |      Returns:
 |          dict{dict}: A 2D dictonary of Section objects per term.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from collections.abc.Mapping:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  get(self, key, default=None)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(self)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(self)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  values(self)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from collections.abc.Mapping:
 |  
 |  __hash__ = None
 |  
 |  __reversed__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from collections.abc.Collection:
 |  
 |  __subclasshook__(C) from abc.ABCMeta
 |      Abstract classes can override this to customize issubclass().
 |      
 |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
 |      It should return True, False or NotImplemented.  If it returns
 |      NotImplemented, the normal algorithm is used.  Otherwise, it
 |      overrides the normal algorithm (and the outcome is cached).


class Student(builtins.object)
 |  Student(name, academic_year, program, completed_courses, course_wish_list)
 |  
 |  Represents a specific student with their attributes.
 |  
 |  Attributes:
 |      - _name (str): The name of the student.
 |      - _academic_year (AcademicYear): The current academic year of the student.
 |      - _program (string): The program the student is enrolled in. #TODO needs to be mapped to a new program class to force required courses
 |      - _completed_courses (Courses): A Courses object containing a collection of this students completed of courses.
 |      - _course_wish_list (Courses): A Courses object containing the courses this student wishes to enroll in this academic year.
 |  
 |  Methods:
 |      __str__(): Returns a string representation of the Student instance.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, academic_year, program, completed_courses, course_wish_list)
 |      Initializes a Student instance.
 |      
 |      Args:
 |          _name (str): The name of the student.
 |          _academic_year (AcademicYear): The current academic year of the student.
 |          _program (string): The program the student is enrolled in.
 |          _completed_courses (Courses): A Courses object containing a collection of this students completed of courses.
 |          _course_wish_list (Courses): A Courses object containing the courses this student wishes to enroll in this academic year.
 |  
 |  __str__(self)
 |      Returns a string representation of the Student.
 |      
 |      Returns:
 |          str: A formatted string with Student information.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  academic_year
 |      Get the academic year attribute.
 |  
 |  completed_courses
 |      Get the completed_courses attribute, a Courses object.
 |  
 |  course_wish_list
 |      Get the course_wish_list attribute, a Courses object.
 |  
 |  name
 |      Get the student name attribute.
 |  
 |  program
 |      Get the program attribute.

class Students(collections.abc.Mapping)
 |  Students(students=None)
 |  
 |  Represents a collection of CourseSection objects with the ability to manage, search, and iterate through them.
 |  
 |  Attributes:
 |      students (dict): A dictionary that stores Student objects by their unique IDs.
 |  
 |  Methods:
 |      add_student(self, student): Add a Student to the collection.
 |      find_student_by_name(self, name): Find a Student by its unique identifier.
 |      __str__(self): Returns a string representation of the list of Student objects.
 |      __iter__(self): Make the Students class iterable. This method returns an iterator.
 |      __next__(self): Get the next Student object in the iteration.
 |      __getitem__(self, item): Retrieve a Student object by its unique ID.
 |      __len__(self): Get the number of Student objects in the collection.
 |      __contains__(self, item): Check if a Student object is in the collection.
 |      __getitem__(self, item): Retrieve a Student object by its unique ID.
 |      add_items(self, key, value): Add a Student object to the collection using a unique identifier (ID).
 |  
 |  Method resolution order:
 |      Students
 |      collections.abc.Mapping
 |      collections.abc.Collection
 |      collections.abc.Sized
 |      collections.abc.Iterable
 |      collections.abc.Container
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, item)
 |      Check if a Student object is in the collection.
 |      
 |      Args:
 |          item: The Student object to check for presence in the collection.
 |      
 |      Returns:
 |          bool: True if the Student object is in the collection, False otherwise.
 |  
 |  __getitem__(self, item)
 |      Retrieve a Student object by its unique ID.
 |      
 |      Args:
 |          item: The unique identifier (ID) of the Student to be retrieved.
 |      
 |      Returns:
 |          Student: The Student object associated with the provided unique ID.
 |      
 |      Note:
 |          This method allows you to access a Student object from the Students
 |          collection using its unique identifier. If the ID is not found, it
 |          will raise a KeyError.
 |  
 |  __init__(self, students=None)
 |      Initializes a Students instance with an optional dictionary of Student objects.
 |      
 |      Args:
 |          students (dict, optional): A dictionary of Student objects indexed by student name.
 |              Default is None, which creates an empty dictionary.
 |  
 |  __iter__(self)
 |      Make the Students class iterable. This method returns an iterator.
 |  
 |  __len__(self)
 |      Get the number of Student objects in the collection.
 |      
 |      Returns:
 |          int: The number of Student objects in the collection.
 |  
 |  __next__(self)
 |      Get the next Student object in the iteration.
 |  
 |  __str__(self)
 |      Returns a string representation of the list of Student objects.
 |      
 |      Returns:
 |          str: A list with information for each Student.
 |  
 |  add_item(self, key, value)
 |      Add a Stuent object to the collection using a unique identifier (ID).
 |      
 |      Args:
 |          key: The unique identifier (ID) for the Student.
 |          value: The Student object to add to the collection.
 |  
 |  add_student(self, student)
 |      Add a student  to the collection.
 |      
 |      Args:
 |          student (Student): The Student object to be added.
 |  
 |  add_students(self, students)
 |      Add multiple students to the collection.
 |      
 |      Args:
 |          students (list of Students): A list of Student objects to be added.
 |  
 |  find_student_by_name(self, name)
 |      Find a Student object by its unique name.
 |      
 |      Args:
 |          id (str): The unique name of the Student to search for.
 |      
 |      Returns:
 |          Student or None: The Student object if found, or None if not found.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  students
 |      Get the list of Students.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ALLSTUDENTS = None
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from collections.abc.Mapping:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  get(self, key, default=None)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(self)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(self)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  values(self)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from collections.abc.Mapping:
 |  
 |  __hash__ = None
 |  
 |  __reversed__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from collections.abc.Collection:
 |  
 |  __subclasshook__(C) from abc.ABCMeta
 |      Abstract classes can override this to customize issubclass().
 |      
 |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
 |      It should return True, False or NotImplemented.  If it returns
 |      NotImplemented, the normal algorithm is used.  Otherwise, it
 |      overrides the normal algorithm (and the outcome is cached).

